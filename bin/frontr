#!/bin/bash

#/ Usage: frontr [-r <r-script>] [-g] [--] [...]
#/   -r <r-script>  R script to run non-interactively
#/   -g, --graphite parse input from Graphite
#/   --             end of frontr arguments, beginning of data command

set -e

F="tee in.dat"
while [ "$#" -gt 0 ]
do
	case "$1" in
		-r)
			R_SCRIPT="$(readlink -f "$2")"
			shift 2;;
		-r*)
			R_SCRIPT="$(readlink -f "$(echo "$1" | cut -c3-)")"
			shift;;
		-g|--graphite)
			F="graphite"
			shift;;
		--)
			shift
			break;;
		-*)
			grep "^#/" "$0" | cut -c4- 1>&2
			exit 1;;
		*)
			break;;
	esac
done

TMP="$(mktemp -d)"
trap "rm -rf \"$TMP\"" EXIT INT TERM
cd "$TMP"

# The Graphite data API writes a single line for each metric with a header
# listing the target, start time, end time, and step, followed by a '|',
# followed by the appropriate number of comma-delimited data.  See also:
# <http://graphite.wikidot.com/url-api-reference>.
graphite() {
	exec 3>header
	while read -N1 CHAR
	do
		case "$CHAR" in

			# Process the header of a stream of data.  Construct the X
			# series from the start, end, and step given in the header.
			\|)
				echo "frontr: found Graphite header" >&2
				NAME="$(cut -d, -f1 header)"
				seq $(awk -F, '{print $2, $4, $3}' header) >>"$NAME.x"
				exec 3>"$NAME";;

			# Process the end of a stream of data.  Transform the data
			# into a line-oriented format suitable for Unixing.
			"") # \n
				echo "frontr: found Graphite data" >&2
				echo >&3
				tr , \\n <"$NAME" | sed s/None/0.0/ >>"$NAME.y"
				rm "$NAME"
				exec 3>header;;

			# Store the next character.
			*)
				printf "%s" "$CHAR" >&3;;

		esac
	done
	rm header
}

# Evaluate input of a well-known format specified by a command-line option.
"$@" | "$F"

# Every input's x-axis has to agree or else this gets too difficult.
diff --from-file *.x

find . -type f -name \*.x | xargs -I__ basename __ .x | while read NAME
do

	# Truncate as necessary so each X and Y pair are the same length.
	X_WC="$(wc -l <"$NAME.x")" Y_WC="$(wc -l <"$NAME.y")"
	if [ "$X_WC" -gt "$Y_WC" ]
	then
		DIFF=$(($X_WC - $Y_WC))
		echo "frontr: truncating $DIFF lines from $NAME.x" >&2
		head -n-$DIFF <"$NAME.x" >"$NAME.x.tmp"
		mv "$NAME.x.tmp" "$NAME.x"
	elif [ "$X_WC" -lt "$Y_WC" ]
	then
		DIFF=$(($Y_WC - $X_WC))
		echo "frontr: truncating $DIFF lines from $NAME.y" >&2
		head -n-$DIFF <"$NAME.y" >"$NAME.y.tmp"
		mv "$NAME.y.tmp" "$NAME.y"
	fi

	# Join each X and Y pair into the format expected by `read.table`.
	echo "x y" >"$NAME"
	while true
	do
		read -u3 X && read -u4 Y || break
		echo "$X $Y" >&5
	done 3<"$NAME.x" 4<"$NAME.y" 5>>"$NAME"

done

# Give some context about the files available.
echo >&2
ls -l
echo >&2
wc -l *

# Launch R either running the given script or as an interactive console.
if [ -z "$R_SCRIPT" ]
then
	echo >&2
	echo "frontr:" >&2
	echo "  png(filename=\"$HOME/out.png\", width=1000, height=750)" >&2
	find . -type f -name \*.x | xargs -I__ basename __ .x | while read NAME
	do
		echo "  read.table(\"$NAME\", header=TRUE)" >&2
		echo "  scan(\"$NAME.x\", 0)" >&2
		echo "  scan(\"$NAME.y\", 0)" >&2
	done
	R --save
else
	R --save <"$R_SCRIPT"
fi
