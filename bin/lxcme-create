#!/bin/sh

set -e

#/ Usage: lxcme [-a<addr>] -n<name>
#/              [--archive=<archive>] [-c<components>] [-i<include>]
#/              [-r<release>]
#/   -a<addr>, --addr=<addr>                   address for the container's eth0
#/   --archive=<archive>                       Debian archive URL
#/   -c<components>, --compoments=<components> Debian archive components
#/   -i<include>, --include=<include>          additional packages to install
#/   -n<name>, --name=<name>                   name of the container
#/   -r<release>, --release=<release>          Debian/Ubuntu release codename
#/   -h, --help                                show this help message

[ "$(id -u)" = "0" ] || exec sudo "$0" "$@"

: ${ARCHIVE:="http://us.archive.ubuntu.com/ubuntu"}
: ${COMPONENTS:="main,restricted,universe,multiverse"}
: ${INCLUDE:="curl,git-core,man-db,tmux,vim"}
: ${RELEASE:="$(lsb_release -sc)"}
usage() {
	grep "^#/" "$0" | cut -c4- 1>&2
	exit 1
}
while [ "$#" -gt 0 ]
do
	case "$1" in
		-a|--addr)
			ADDR="$2"
			shift 2;;
		-a*)
			ADDR="$(echo $1 | cut -c3-)"
			shift;;
		--addr=*)
			ADDR="$(echo $1 | cut -c8-)"
			shift;;
		--archive)
			ARCHIVE="$2"
			shift 2;;
		--archive=*)
			ARCHIVE="$(echo $1 | cut -c11-)"
			shift;;
		-c|--components)
			COMPONENTS="$2"
			shift 2;;
		-c*)
			COMPONENTS="$(echo $1 | cut -c3-)"
			shift;;
		--components=*)
			INCLUDE="$(echo $1 | cut -c14-)"
			shift;;
		-i|--include)
			INCLUDE="$2"
			shift 2;;
		-i*)
			INCLUDE="$(echo $1 | cut -c3-)"
			shift;;
		--include=*)
			INCLUDE="$(echo $1 | cut -c11-)"
			shift;;
		-n|--name)
			NAME="$2"
			shift 2;;
		-n*)
			NAME="$(echo $1 | cut -c3-)"
			shift;;
		--name=*)
			NAME="$(echo $1 | cut -c8-)"
			shift;;
		-r|--release)
			RELEASE="$2"
			shift 2;;
		-r*)
			RELEASE="$(echo $1 | cut -c3-)"
			shift;;
		--release=*)
			RELEASE="$(echo $1 | cut -c11-)"
			shift;;
		*)
			usage;;
	esac
done
CONF="/etc/lxc/$NAME.conf"
ROOT="/var/lib/lxc/$NAME"
ROOTFS="$ROOT/rootfs"
GATEWAY="$(route -n | grep UG | awk '{print $2}')"
if [ -z "$ADDR" ]
then
	ADDR="$(
		grep -s "lxc.network.ipv4" "/var/lib/lxc/$NAME/config" |
		cut -d= -f2 |
		tr -d " \t"
	)"
fi
[ -z "$ADDR" -o -z "$ARCHIVE" -o -z "$NAME" -o -z "$RELEASE" ] && usage

# Install dependencies.
apt-get -q -y install bridge-utils debootstrap lxc

# Bridge eth0 so the containers can use it.
ifconfig br0 >/dev/null || {
	cat <<EOF

An ethernet bridge is required to use lxcme.  Replace the current eth0
configuration in /etc/network/interfaces with the following and restart
networking or the entire system.

auto br0
iface br0 inet dhcp
	bridge_fd 0
	bridge_ports eth0
EOF
	exit 1
}

# Forward IP traffic.
cat >/etc/sysctl.d/70-lxcme.conf <<EOF
net.ipv4.conf.default.proxy_arp = 1
net.ipv4.ip_forward = 1
EOF
start procps

# Mount the cgroup filesystem, which is required by the lxc-* tools.
#mkdir /cgroup 2>/dev/null && {
#	mount none -t cgroup /cgroup
#	echo "none /cgroup cgroup defaults 0 0" >>/etc/fstab
#}

# Configure this container, its network, and its filesystems.
cat >"/etc/lxc/$NAME.conf" <<EOF
lxc.utsname = $NAME
lxc.tty = 6
lxc.network.type = veth
lxc.network.veth.pair = veth-$NAME
lxc.network.flags = up
lxc.network.link = br0
lxc.network.name = eth0
lxc.network.ipv4 = $ADDR
lxc.rootfs = $ROOTFS
lxc.cgroup.devices.deny = a
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm
lxc.cgroup.devices.allow = c 254:0 rwm
EOF

# Create the container and its rootfs.  The minimal system installed by
# debootstrap will additionally have openssh-server to make the container
# accessible to the host system.  It will also have curl, git-core, tmux,
# and vim so I don't have to keep installing those by hand.
[ -f "$ROOT/config" ] || lxc-create -f"$CONF" -n"$NAME"
[ -d "$ROOTFS" ] || debootstrap \
	--include="debian-archive-keyring,openssh-server,$INCLUDE" \
	--components="$COMPONENTS" \
	"$RELEASE" "$ROOTFS" "$ARCHIVE"
chroot "$ROOTFS" apt-get -q update
echo -n "$NAME" >"$ROOTFS/.lxcme"

# Determine which user and group should be used in the container.  If
# lxcme is running under sudo -i or is really running as root, go ahead
# as root.  Otherwise, add the appropriate user and group to the
# container and allow that user to login from host to container with
# an SSH key.  (This seems complex but it's the least surprising thing
# to do from the user's perspective.)
if [ "$(getent passwd "$SUDO_USER" | cut -d: -f6)" = "$HOME" ]
then
	U="$SUDO_USER"
else
	U="$USER"
fi
UID="$(getent passwd "$U" | cut -d: -f3)"
GID="$(getent passwd "$U" | cut -d: -f4)"
G="$(getent group "$GID" | cut -d: -f1)"
H="$(getent passwd "$U" | cut -d: -f6)"
S="$(getent passwd "$U" | cut -d: -f7)"

# Find or create an SSH key on the host.
mkdir -m700 "$H/.ssh" 2>/dev/null || :
[ -f "$H/.ssh/id_rsa.pub" ] || ssh-keygen -f"$H/.ssh/id_rsa" -trsa

# Remove any previously-active known_hosts entries for this address.
ssh-keygen -f"$H/.ssh/known_hosts" -R "$ADDR"

# Correct ownership of the host's SSH configuration.
chown -R "$U:$G" "$H/.ssh"

# Add the appropriate user and group to the container and authorize the
# SSH key from above.
chroot "$ROOTFS" groupadd -g"$GID" "$G" 2>/dev/null || :
chroot "$ROOTFS" useradd -u"$UID" -g"$GID" -m -s"$S" -p* "$U" 2>/dev/null || :
mkdir -m700 "$ROOTFS/$H/.ssh" 2>/dev/null || :
cp "$H/.ssh/id_rsa.pub" "$ROOTFS/$H/.ssh/authorized_keys"
chown -R "$U:$G" "$ROOTFS/$H/.ssh"

# Give the container the same hosts and sudoers files enjoyed by the host.
cp "/etc/hosts" "$ROOTFS/etc/hosts"
cp "/etc/sudoers" "$ROOTFS/etc/sudoers"

# Tell the container to shutup already about the locale.
chroot "$ROOTFS" locale-gen "$LANG"

# Start init(8) in the container in the background.
lxcme-start -n"$NAME"

cat <<EOF

Done!  The container has been started.  Commands to remember:

     o  Login to the running container:  ssh $NAME
     o  Stop the container:  lxcme-stop -n $NAME
     o  Start the container:  lxcme-start -n $NAME

EOF
